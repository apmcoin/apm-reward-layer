/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ApMMembersPlusSBT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApMMembersPlusSBT__factory>;
    getContractFactory(
      name: "BusRideManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BusRideManager__factory>;
    getContractFactory(
      name: "ManagerRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ManagerRole__factory>;
    getContractFactory(
      name: "PlusMemberManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlusMemberManager__factory>;
    getContractFactory(
      name: "CapperRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CapperRole__factory>;
    getContractFactory(
      name: "MinterRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinterRole__factory>;
    getContractFactory(
      name: "PauserRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PauserRole__factory>;
    getContractFactory(
      name: "SignerRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignerRole__factory>;
    getContractFactory(
      name: "WhitelistAdminRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistAdminRole__factory>;
    getContractFactory(
      name: "WhitelistedRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistedRole__factory>;
    getContractFactory(
      name: "Crowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Crowdsale__factory>;
    getContractFactory(
      name: "FinalizableCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinalizableCrowdsale__factory>;
    getContractFactory(
      name: "UnstableTokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnstableTokenVault__factory>;
    getContractFactory(
      name: "PostDeliveryCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PostDeliveryCrowdsale__factory>;
    getContractFactory(
      name: "RefundableCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RefundableCrowdsale__factory>;
    getContractFactory(
      name: "RefundablePostDeliveryCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RefundablePostDeliveryCrowdsale__factory>;
    getContractFactory(
      name: "AllowanceCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowanceCrowdsale__factory>;
    getContractFactory(
      name: "MintedCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintedCrowdsale__factory>;
    getContractFactory(
      name: "IncreasingPriceCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncreasingPriceCrowdsale__factory>;
    getContractFactory(
      name: "CappedCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CappedCrowdsale__factory>;
    getContractFactory(
      name: "IndividuallyCappedCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IndividuallyCappedCrowdsale__factory>;
    getContractFactory(
      name: "PausableCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableCrowdsale__factory>;
    getContractFactory(
      name: "TimedCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimedCrowdsale__factory>;
    getContractFactory(
      name: "WhitelistCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistCrowdsale__factory>;
    getContractFactory(
      name: "ERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Metadata__factory>;
    getContractFactory(
      name: "ERC20Migrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Migrator__factory>;
    getContractFactory(
      name: "ERC20Snapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Snapshot__factory>;
    getContractFactory(
      name: "SignatureBouncer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureBouncer__factory>;
    getContractFactory(
      name: "TokenVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenVesting__factory>;
    getContractFactory(
      name: "SampleCrowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleCrowdsale__factory>;
    getContractFactory(
      name: "SampleCrowdsaleToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleCrowdsaleToken__factory>;
    getContractFactory(
      name: "SimpleToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleToken__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Registry__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "AddressImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressImpl__factory>;
    getContractFactory(
      name: "AllowanceCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowanceCrowdsaleImpl__factory>;
    getContractFactory(
      name: "ArraysImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArraysImpl__factory>;
    getContractFactory(
      name: "CappedCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CappedCrowdsaleImpl__factory>;
    getContractFactory(
      name: "CapperRoleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CapperRoleMock__factory>;
    getContractFactory(
      name: "ConditionalEscrowMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConditionalEscrowMock__factory>;
    getContractFactory(
      name: "CountersImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CountersImpl__factory>;
    getContractFactory(
      name: "CrowdsaleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrowdsaleMock__factory>;
    getContractFactory(
      name: "ECDSAMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSAMock__factory>;
    getContractFactory(
      name: "ERC165InterfacesSupported",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165InterfacesSupported__factory>;
    getContractFactory(
      name: "SupportsInterfaceWithLookupMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupportsInterfaceWithLookupMock__factory>;
    getContractFactory(
      name: "ERC165CheckerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165CheckerMock__factory>;
    getContractFactory(
      name: "ERC165Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Mock__factory>;
    getContractFactory(
      name: "ERC1820ImplementerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1820ImplementerMock__factory>;
    getContractFactory(
      name: "ERC20BurnableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableMock__factory>;
    getContractFactory(
      name: "ERC20DetailedMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20DetailedMock__factory>;
    getContractFactory(
      name: "ERC20MetadataMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MetadataMock__factory>;
    getContractFactory(
      name: "ERC20MintableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MintableMock__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "ERC20PausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PausableMock__factory>;
    getContractFactory(
      name: "ERC20SnapshotMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20SnapshotMock__factory>;
    getContractFactory(
      name: "ERC721FullMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721FullMock__factory>;
    getContractFactory(
      name: "ERC721MintableBurnableImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721MintableBurnableImpl__factory>;
    getContractFactory(
      name: "ERC721Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Mock__factory>;
    getContractFactory(
      name: "ERC721PausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721PausableMock__factory>;
    getContractFactory(
      name: "ERC721ReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721ReceiverMock__factory>;
    getContractFactory(
      name: "ERC777Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777Mock__factory>;
    getContractFactory(
      name: "ERC777SenderRecipientMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777SenderRecipientMock__factory>;
    getContractFactory(
      name: "FinalizableCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinalizableCrowdsaleImpl__factory>;
    getContractFactory(
      name: "IncreasingPriceCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncreasingPriceCrowdsaleImpl__factory>;
    getContractFactory(
      name: "IndividuallyCappedCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IndividuallyCappedCrowdsaleImpl__factory>;
    getContractFactory(
      name: "MathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MathMock__factory>;
    getContractFactory(
      name: "MerkleProofWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleProofWrapper__factory>;
    getContractFactory(
      name: "MintedCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintedCrowdsaleImpl__factory>;
    getContractFactory(
      name: "MinterRoleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinterRoleMock__factory>;
    getContractFactory(
      name: "OwnableInterfaceId",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableInterfaceId__factory>;
    getContractFactory(
      name: "OwnableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableMock__factory>;
    getContractFactory(
      name: "PausableCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableCrowdsaleImpl__factory>;
    getContractFactory(
      name: "PausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableMock__factory>;
    getContractFactory(
      name: "PauserRoleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PauserRoleMock__factory>;
    getContractFactory(
      name: "PostDeliveryCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PostDeliveryCrowdsaleImpl__factory>;
    getContractFactory(
      name: "PullPaymentMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PullPaymentMock__factory>;
    getContractFactory(
      name: "ReentrancyAttack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyAttack__factory>;
    getContractFactory(
      name: "ReentrancyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyMock__factory>;
    getContractFactory(
      name: "RefundableCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RefundableCrowdsaleImpl__factory>;
    getContractFactory(
      name: "RefundablePostDeliveryCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RefundablePostDeliveryCrowdsaleImpl__factory>;
    getContractFactory(
      name: "RolesMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RolesMock__factory>;
    getContractFactory(
      name: "ERC20NoReturnMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20NoReturnMock__factory>;
    getContractFactory(
      name: "ERC20ReturnFalseMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20ReturnFalseMock__factory>;
    getContractFactory(
      name: "ERC20ReturnTrueMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20ReturnTrueMock__factory>;
    getContractFactory(
      name: "SafeERC20Wrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20Wrapper__factory>;
    getContractFactory(
      name: "SafeMathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeMathMock__factory>;
    getContractFactory(
      name: "SecondaryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SecondaryMock__factory>;
    getContractFactory(
      name: "SignatureBouncerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureBouncerMock__factory>;
    getContractFactory(
      name: "SignedSafeMathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignedSafeMathMock__factory>;
    getContractFactory(
      name: "SignerRoleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignerRoleMock__factory>;
    getContractFactory(
      name: "TimedCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimedCrowdsaleImpl__factory>;
    getContractFactory(
      name: "WhitelistAdminRoleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistAdminRoleMock__factory>;
    getContractFactory(
      name: "WhitelistCrowdsaleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistCrowdsaleImpl__factory>;
    getContractFactory(
      name: "WhitelistedRoleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistedRoleMock__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Secondary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Secondary__factory>;
    getContractFactory(
      name: "ConditionalEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConditionalEscrow__factory>;
    getContractFactory(
      name: "Escrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Escrow__factory>;
    getContractFactory(
      name: "RefundEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RefundEscrow__factory>;
    getContractFactory(
      name: "PaymentSplitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PaymentSplitter__factory>;
    getContractFactory(
      name: "PullPayment",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PullPayment__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Capped",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Capped__factory>;
    getContractFactory(
      name: "ERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Detailed__factory>;
    getContractFactory(
      name: "ERC20Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mintable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "TokenTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenTimelock__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721Full",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Full__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "ERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Metadata__factory>;
    getContractFactory(
      name: "ERC721MetadataMintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721MetadataMintable__factory>;
    getContractFactory(
      name: "ERC721Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Mintable__factory>;
    getContractFactory(
      name: "ERC721Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Pausable__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Full",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Full__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777__factory>;
    getContractFactory(
      name: "IERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777__factory>;
    getContractFactory(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Recipient__factory>;
    getContractFactory(
      name: "IERC777Sender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Sender__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "User",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.User__factory>;
    getContractFactory(
      name: "UserManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserManager__factory>;

    getContractAt(
      name: "ApMMembersPlusSBT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApMMembersPlusSBT>;
    getContractAt(
      name: "BusRideManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BusRideManager>;
    getContractAt(
      name: "ManagerRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ManagerRole>;
    getContractAt(
      name: "PlusMemberManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlusMemberManager>;
    getContractAt(
      name: "CapperRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CapperRole>;
    getContractAt(
      name: "MinterRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinterRole>;
    getContractAt(
      name: "PauserRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PauserRole>;
    getContractAt(
      name: "SignerRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignerRole>;
    getContractAt(
      name: "WhitelistAdminRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistAdminRole>;
    getContractAt(
      name: "WhitelistedRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistedRole>;
    getContractAt(
      name: "Crowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Crowdsale>;
    getContractAt(
      name: "FinalizableCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FinalizableCrowdsale>;
    getContractAt(
      name: "UnstableTokenVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnstableTokenVault>;
    getContractAt(
      name: "PostDeliveryCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PostDeliveryCrowdsale>;
    getContractAt(
      name: "RefundableCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RefundableCrowdsale>;
    getContractAt(
      name: "RefundablePostDeliveryCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RefundablePostDeliveryCrowdsale>;
    getContractAt(
      name: "AllowanceCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowanceCrowdsale>;
    getContractAt(
      name: "MintedCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintedCrowdsale>;
    getContractAt(
      name: "IncreasingPriceCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IncreasingPriceCrowdsale>;
    getContractAt(
      name: "CappedCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CappedCrowdsale>;
    getContractAt(
      name: "IndividuallyCappedCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IndividuallyCappedCrowdsale>;
    getContractAt(
      name: "PausableCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableCrowdsale>;
    getContractAt(
      name: "TimedCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimedCrowdsale>;
    getContractAt(
      name: "WhitelistCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistCrowdsale>;
    getContractAt(
      name: "ERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Metadata>;
    getContractAt(
      name: "ERC20Migrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Migrator>;
    getContractAt(
      name: "ERC20Snapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Snapshot>;
    getContractAt(
      name: "SignatureBouncer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignatureBouncer>;
    getContractAt(
      name: "TokenVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenVesting>;
    getContractAt(
      name: "SampleCrowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleCrowdsale>;
    getContractAt(
      name: "SampleCrowdsaleToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleCrowdsaleToken>;
    getContractAt(
      name: "SimpleToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleToken>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC1820Implementer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1820Implementer>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC1820Implementer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Implementer>;
    getContractAt(
      name: "IERC1820Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Registry>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "AddressImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressImpl>;
    getContractAt(
      name: "AllowanceCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowanceCrowdsaleImpl>;
    getContractAt(
      name: "ArraysImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArraysImpl>;
    getContractAt(
      name: "CappedCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CappedCrowdsaleImpl>;
    getContractAt(
      name: "CapperRoleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CapperRoleMock>;
    getContractAt(
      name: "ConditionalEscrowMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConditionalEscrowMock>;
    getContractAt(
      name: "CountersImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CountersImpl>;
    getContractAt(
      name: "CrowdsaleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrowdsaleMock>;
    getContractAt(
      name: "ECDSAMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSAMock>;
    getContractAt(
      name: "ERC165InterfacesSupported",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165InterfacesSupported>;
    getContractAt(
      name: "SupportsInterfaceWithLookupMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SupportsInterfaceWithLookupMock>;
    getContractAt(
      name: "ERC165CheckerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165CheckerMock>;
    getContractAt(
      name: "ERC165Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Mock>;
    getContractAt(
      name: "ERC1820ImplementerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1820ImplementerMock>;
    getContractAt(
      name: "ERC20BurnableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableMock>;
    getContractAt(
      name: "ERC20DetailedMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20DetailedMock>;
    getContractAt(
      name: "ERC20MetadataMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MetadataMock>;
    getContractAt(
      name: "ERC20MintableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MintableMock>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "ERC20PausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PausableMock>;
    getContractAt(
      name: "ERC20SnapshotMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20SnapshotMock>;
    getContractAt(
      name: "ERC721FullMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721FullMock>;
    getContractAt(
      name: "ERC721MintableBurnableImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721MintableBurnableImpl>;
    getContractAt(
      name: "ERC721Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Mock>;
    getContractAt(
      name: "ERC721PausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721PausableMock>;
    getContractAt(
      name: "ERC721ReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721ReceiverMock>;
    getContractAt(
      name: "ERC777Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777Mock>;
    getContractAt(
      name: "ERC777SenderRecipientMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777SenderRecipientMock>;
    getContractAt(
      name: "FinalizableCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FinalizableCrowdsaleImpl>;
    getContractAt(
      name: "IncreasingPriceCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IncreasingPriceCrowdsaleImpl>;
    getContractAt(
      name: "IndividuallyCappedCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IndividuallyCappedCrowdsaleImpl>;
    getContractAt(
      name: "MathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MathMock>;
    getContractAt(
      name: "MerkleProofWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleProofWrapper>;
    getContractAt(
      name: "MintedCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintedCrowdsaleImpl>;
    getContractAt(
      name: "MinterRoleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinterRoleMock>;
    getContractAt(
      name: "OwnableInterfaceId",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableInterfaceId>;
    getContractAt(
      name: "OwnableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableMock>;
    getContractAt(
      name: "PausableCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableCrowdsaleImpl>;
    getContractAt(
      name: "PausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableMock>;
    getContractAt(
      name: "PauserRoleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PauserRoleMock>;
    getContractAt(
      name: "PostDeliveryCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PostDeliveryCrowdsaleImpl>;
    getContractAt(
      name: "PullPaymentMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PullPaymentMock>;
    getContractAt(
      name: "ReentrancyAttack",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyAttack>;
    getContractAt(
      name: "ReentrancyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyMock>;
    getContractAt(
      name: "RefundableCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RefundableCrowdsaleImpl>;
    getContractAt(
      name: "RefundablePostDeliveryCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RefundablePostDeliveryCrowdsaleImpl>;
    getContractAt(
      name: "RolesMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RolesMock>;
    getContractAt(
      name: "ERC20NoReturnMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20NoReturnMock>;
    getContractAt(
      name: "ERC20ReturnFalseMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20ReturnFalseMock>;
    getContractAt(
      name: "ERC20ReturnTrueMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20ReturnTrueMock>;
    getContractAt(
      name: "SafeERC20Wrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20Wrapper>;
    getContractAt(
      name: "SafeMathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeMathMock>;
    getContractAt(
      name: "SecondaryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SecondaryMock>;
    getContractAt(
      name: "SignatureBouncerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignatureBouncerMock>;
    getContractAt(
      name: "SignedSafeMathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignedSafeMathMock>;
    getContractAt(
      name: "SignerRoleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignerRoleMock>;
    getContractAt(
      name: "TimedCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimedCrowdsaleImpl>;
    getContractAt(
      name: "WhitelistAdminRoleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistAdminRoleMock>;
    getContractAt(
      name: "WhitelistCrowdsaleImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistCrowdsaleImpl>;
    getContractAt(
      name: "WhitelistedRoleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistedRoleMock>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Secondary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Secondary>;
    getContractAt(
      name: "ConditionalEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConditionalEscrow>;
    getContractAt(
      name: "Escrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Escrow>;
    getContractAt(
      name: "RefundEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RefundEscrow>;
    getContractAt(
      name: "PaymentSplitter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PaymentSplitter>;
    getContractAt(
      name: "PullPayment",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PullPayment>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Capped",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Capped>;
    getContractAt(
      name: "ERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Detailed>;
    getContractAt(
      name: "ERC20Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mintable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "TokenTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenTimelock>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721Full",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Full>;
    getContractAt(
      name: "ERC721Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "ERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Metadata>;
    getContractAt(
      name: "ERC721MetadataMintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721MetadataMintable>;
    getContractAt(
      name: "ERC721Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Mintable>;
    getContractAt(
      name: "ERC721Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Pausable>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Full",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Full>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777>;
    getContractAt(
      name: "IERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777>;
    getContractAt(
      name: "IERC777Recipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Recipient>;
    getContractAt(
      name: "IERC777Sender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Sender>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "User",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.User>;
    getContractAt(
      name: "UserManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserManager>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
