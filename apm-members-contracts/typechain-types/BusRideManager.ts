/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BusRideManagerInterface extends utils.Interface {
  functions: {
    "locationDescriptions(uint256)": FunctionFragment;
    "addManager(address)": FunctionFragment;
    "recordRide(bytes32,uint256,uint256)": FunctionFragment;
    "setLocationDescription(uint256,string)": FunctionFragment;
    "rides(uint256)": FunctionFragment;
    "getLocationDescription(uint256)": FunctionFragment;
    "getRideCount()": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "isManager(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "locationDescriptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "recordRide",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLocationDescription",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "rides", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getLocationDescription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRideCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "locationDescriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recordRide", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLocationDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rides", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLocationDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRideCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;

  events: {
    "RideRecorded(bytes32,uint256,uint256)": EventFragment;
    "ManagerAdded(address)": EventFragment;
    "ManagerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RideRecorded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerRemoved"): EventFragment;
}

export type RideRecordedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { userUuid: string; location: BigNumber; timestamp: BigNumber }
>;

export type RideRecordedEventFilter = TypedEventFilter<RideRecordedEvent>;

export type ManagerAddedEvent = TypedEvent<[string], { account: string }>;

export type ManagerAddedEventFilter = TypedEventFilter<ManagerAddedEvent>;

export type ManagerRemovedEvent = TypedEvent<[string], { account: string }>;

export type ManagerRemovedEventFilter = TypedEventFilter<ManagerRemovedEvent>;

export interface BusRideManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BusRideManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    locationDescriptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recordRide(
      userUuid: BytesLike,
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLocationDescription(
      location: BigNumberish,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rides(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        userUuid: string;
        location: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getLocationDescription(
      location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRideCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isManager(account: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  locationDescriptions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  addManager(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recordRide(
    userUuid: BytesLike,
    location: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLocationDescription(
    location: BigNumberish,
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rides(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      userUuid: string;
      location: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getLocationDescription(
    location: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRideCount(overrides?: CallOverrides): Promise<BigNumber>;

  removeManager(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isManager(account: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    locationDescriptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addManager(account: string, overrides?: CallOverrides): Promise<void>;

    recordRide(
      userUuid: BytesLike,
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLocationDescription(
      location: BigNumberish,
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rides(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        userUuid: string;
        location: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getLocationDescription(
      location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRideCount(overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(account: string, overrides?: CallOverrides): Promise<void>;

    isManager(account: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "RideRecorded(bytes32,uint256,uint256)"(
      userUuid?: null,
      location?: null,
      timestamp?: null
    ): RideRecordedEventFilter;
    RideRecorded(
      userUuid?: null,
      location?: null,
      timestamp?: null
    ): RideRecordedEventFilter;

    "ManagerAdded(address)"(account?: string | null): ManagerAddedEventFilter;
    ManagerAdded(account?: string | null): ManagerAddedEventFilter;

    "ManagerRemoved(address)"(
      account?: string | null
    ): ManagerRemovedEventFilter;
    ManagerRemoved(account?: string | null): ManagerRemovedEventFilter;
  };

  estimateGas: {
    locationDescriptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recordRide(
      userUuid: BytesLike,
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLocationDescription(
      location: BigNumberish,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rides(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getLocationDescription(
      location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRideCount(overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isManager(account: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    locationDescriptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recordRide(
      userUuid: BytesLike,
      location: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLocationDescription(
      location: BigNumberish,
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rides(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocationDescription(
      location: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRideCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isManager(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
