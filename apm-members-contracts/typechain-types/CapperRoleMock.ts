/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CapperRoleMockInterface extends utils.Interface {
  functions: {
    "isCapper(address)": FunctionFragment;
    "removeCapper(address)": FunctionFragment;
    "renounceCapper()": FunctionFragment;
    "addCapper(address)": FunctionFragment;
    "onlyCapperMock()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isCapper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeCapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceCapper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addCapper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "onlyCapperMock",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "isCapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceCapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyCapperMock",
    data: BytesLike
  ): Result;

  events: {
    "CapperAdded(address)": EventFragment;
    "CapperRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CapperAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapperRemoved"): EventFragment;
}

export type CapperAddedEvent = TypedEvent<[string], { account: string }>;

export type CapperAddedEventFilter = TypedEventFilter<CapperAddedEvent>;

export type CapperRemovedEvent = TypedEvent<[string], { account: string }>;

export type CapperRemovedEventFilter = TypedEventFilter<CapperRemovedEvent>;

export interface CapperRoleMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CapperRoleMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isCapper(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    removeCapper(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceCapper(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCapper(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onlyCapperMock(overrides?: CallOverrides): Promise<[void]>;
  };

  isCapper(account: string, overrides?: CallOverrides): Promise<boolean>;

  removeCapper(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceCapper(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCapper(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onlyCapperMock(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    isCapper(account: string, overrides?: CallOverrides): Promise<boolean>;

    removeCapper(account: string, overrides?: CallOverrides): Promise<void>;

    renounceCapper(overrides?: CallOverrides): Promise<void>;

    addCapper(account: string, overrides?: CallOverrides): Promise<void>;

    onlyCapperMock(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CapperAdded(address)"(account?: string | null): CapperAddedEventFilter;
    CapperAdded(account?: string | null): CapperAddedEventFilter;

    "CapperRemoved(address)"(account?: string | null): CapperRemovedEventFilter;
    CapperRemoved(account?: string | null): CapperRemovedEventFilter;
  };

  estimateGas: {
    isCapper(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeCapper(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceCapper(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCapper(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onlyCapperMock(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isCapper(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCapper(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceCapper(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCapper(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onlyCapperMock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
