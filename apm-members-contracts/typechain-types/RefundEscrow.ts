/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RefundEscrowInterface extends utils.Interface {
  functions: {
    "transferPrimary(address)": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "close()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawalAllowed(address)": FunctionFragment;
    "enableRefunds()": FunctionFragment;
    "beneficiaryWithdraw()": FunctionFragment;
    "state()": FunctionFragment;
    "primary()": FunctionFragment;
    "depositsOf(address)": FunctionFragment;
    "deposit(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "transferPrimary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawalAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableRefunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(functionFragment: "primary", values?: undefined): string;
  encodeFunctionData(functionFragment: "depositsOf", values: [string]): string;
  encodeFunctionData(functionFragment: "deposit", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "transferPrimary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableRefunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "primary", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositsOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;

  events: {
    "RefundsClosed()": EventFragment;
    "RefundsEnabled()": EventFragment;
    "Deposited(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
    "PrimaryTransferred(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RefundsClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundsEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrimaryTransferred"): EventFragment;
}

export type RefundsClosedEvent = TypedEvent<[], {}>;

export type RefundsClosedEventFilter = TypedEventFilter<RefundsClosedEvent>;

export type RefundsEnabledEvent = TypedEvent<[], {}>;

export type RefundsEnabledEventFilter = TypedEventFilter<RefundsEnabledEvent>;

export type DepositedEvent = TypedEvent<
  [string, BigNumber],
  { payee: string; weiAmount: BigNumber }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  { payee: string; weiAmount: BigNumber }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export type PrimaryTransferredEvent = TypedEvent<
  [string],
  { recipient: string }
>;

export type PrimaryTransferredEventFilter =
  TypedEventFilter<PrimaryTransferredEvent>;

export interface RefundEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RefundEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    transferPrimary(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    enableRefunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beneficiaryWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[number]>;

    primary(overrides?: CallOverrides): Promise<[string]>;

    depositsOf(payee: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      refundee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  transferPrimary(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  close(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    payee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  enableRefunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beneficiaryWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<number>;

  primary(overrides?: CallOverrides): Promise<string>;

  depositsOf(payee: string, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    refundee: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    transferPrimary(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    close(overrides?: CallOverrides): Promise<void>;

    withdraw(payee: string, overrides?: CallOverrides): Promise<void>;

    withdrawalAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableRefunds(overrides?: CallOverrides): Promise<void>;

    beneficiaryWithdraw(overrides?: CallOverrides): Promise<void>;

    state(overrides?: CallOverrides): Promise<number>;

    primary(overrides?: CallOverrides): Promise<string>;

    depositsOf(payee: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(refundee: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "RefundsClosed()"(): RefundsClosedEventFilter;
    RefundsClosed(): RefundsClosedEventFilter;

    "RefundsEnabled()"(): RefundsEnabledEventFilter;
    RefundsEnabled(): RefundsEnabledEventFilter;

    "Deposited(address,uint256)"(
      payee?: string | null,
      weiAmount?: null
    ): DepositedEventFilter;
    Deposited(payee?: string | null, weiAmount?: null): DepositedEventFilter;

    "Withdrawn(address,uint256)"(
      payee?: string | null,
      weiAmount?: null
    ): WithdrawnEventFilter;
    Withdrawn(payee?: string | null, weiAmount?: null): WithdrawnEventFilter;

    "PrimaryTransferred(address)"(
      recipient?: null
    ): PrimaryTransferredEventFilter;
    PrimaryTransferred(recipient?: null): PrimaryTransferredEventFilter;
  };

  estimateGas: {
    transferPrimary(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableRefunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beneficiaryWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    primary(overrides?: CallOverrides): Promise<BigNumber>;

    depositsOf(payee: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      refundee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    transferPrimary(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableRefunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beneficiaryWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositsOf(
      payee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      refundee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
