/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SignerRoleInterface extends utils.Interface {
  functions: {
    "isSigner(address)": FunctionFragment;
    "renounceSigner()": FunctionFragment;
    "addSigner(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceSigner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addSigner", values: [string]): string;

  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSigner", data: BytesLike): Result;

  events: {
    "SignerAdded(address)": EventFragment;
    "SignerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SignerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerRemoved"): EventFragment;
}

export type SignerAddedEvent = TypedEvent<[string], { account: string }>;

export type SignerAddedEventFilter = TypedEventFilter<SignerAddedEvent>;

export type SignerRemovedEvent = TypedEvent<[string], { account: string }>;

export type SignerRemovedEventFilter = TypedEventFilter<SignerRemovedEvent>;

export interface SignerRole extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignerRoleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isSigner(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceSigner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSigner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  isSigner(account: string, overrides?: CallOverrides): Promise<boolean>;

  renounceSigner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSigner(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isSigner(account: string, overrides?: CallOverrides): Promise<boolean>;

    renounceSigner(overrides?: CallOverrides): Promise<void>;

    addSigner(account: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "SignerAdded(address)"(account?: string | null): SignerAddedEventFilter;
    SignerAdded(account?: string | null): SignerAddedEventFilter;

    "SignerRemoved(address)"(account?: string | null): SignerRemovedEventFilter;
    SignerRemoved(account?: string | null): SignerRemovedEventFilter;
  };

  estimateGas: {
    isSigner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceSigner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSigner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceSigner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSigner(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
