/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SecondaryMockInterface extends utils.Interface {
  functions: {
    "transferPrimary(address)": FunctionFragment;
    "onlyPrimaryMock()": FunctionFragment;
    "primary()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "transferPrimary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onlyPrimaryMock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "primary", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "transferPrimary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyPrimaryMock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "primary", data: BytesLike): Result;

  events: {
    "PrimaryTransferred(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PrimaryTransferred"): EventFragment;
}

export type PrimaryTransferredEvent = TypedEvent<
  [string],
  { recipient: string }
>;

export type PrimaryTransferredEventFilter =
  TypedEventFilter<PrimaryTransferredEvent>;

export interface SecondaryMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SecondaryMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    transferPrimary(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onlyPrimaryMock(overrides?: CallOverrides): Promise<[void]>;

    primary(overrides?: CallOverrides): Promise<[string]>;
  };

  transferPrimary(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onlyPrimaryMock(overrides?: CallOverrides): Promise<void>;

  primary(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    transferPrimary(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onlyPrimaryMock(overrides?: CallOverrides): Promise<void>;

    primary(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PrimaryTransferred(address)"(
      recipient?: null
    ): PrimaryTransferredEventFilter;
    PrimaryTransferred(recipient?: null): PrimaryTransferredEventFilter;
  };

  estimateGas: {
    transferPrimary(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onlyPrimaryMock(overrides?: CallOverrides): Promise<BigNumber>;

    primary(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    transferPrimary(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onlyPrimaryMock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
