/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface UserFactoryInterface extends utils.Interface {
  functions: {
    "addManager(address)": FunctionFragment;
    "getUserCA(bytes32)": FunctionFragment;
    "removeUser(bytes32)": FunctionFragment;
    "createUser(bytes32)": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "isManager(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserCA",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUser",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createUser",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;

  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUserCA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;

  events: {
    "UserCreated(bytes32,address)": EventFragment;
    "UserRemoved(bytes32)": EventFragment;
    "ManagerAdded(address)": EventFragment;
    "ManagerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UserCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerRemoved"): EventFragment;
}

export type UserCreatedEvent = TypedEvent<
  [string, string],
  { userId: string; userCA: string }
>;

export type UserCreatedEventFilter = TypedEventFilter<UserCreatedEvent>;

export type UserRemovedEvent = TypedEvent<[string], { userId: string }>;

export type UserRemovedEventFilter = TypedEventFilter<UserRemovedEvent>;

export type ManagerAddedEvent = TypedEvent<[string], { account: string }>;

export type ManagerAddedEventFilter = TypedEventFilter<ManagerAddedEvent>;

export type ManagerRemovedEvent = TypedEvent<[string], { account: string }>;

export type ManagerRemovedEventFilter = TypedEventFilter<ManagerRemovedEvent>;

export interface UserFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserCA(userId: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    removeUser(
      userId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createUser(
      userId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isManager(account: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addManager(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserCA(userId: BytesLike, overrides?: CallOverrides): Promise<string>;

  removeUser(
    userId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createUser(
    userId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeManager(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isManager(account: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addManager(account: string, overrides?: CallOverrides): Promise<void>;

    getUserCA(userId: BytesLike, overrides?: CallOverrides): Promise<string>;

    removeUser(userId: BytesLike, overrides?: CallOverrides): Promise<void>;

    createUser(userId: BytesLike, overrides?: CallOverrides): Promise<void>;

    removeManager(account: string, overrides?: CallOverrides): Promise<void>;

    isManager(account: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "UserCreated(bytes32,address)"(
      userId?: BytesLike | null,
      userCA?: null
    ): UserCreatedEventFilter;
    UserCreated(
      userId?: BytesLike | null,
      userCA?: null
    ): UserCreatedEventFilter;

    "UserRemoved(bytes32)"(userId?: BytesLike | null): UserRemovedEventFilter;
    UserRemoved(userId?: BytesLike | null): UserRemovedEventFilter;

    "ManagerAdded(address)"(account?: string | null): ManagerAddedEventFilter;
    ManagerAdded(account?: string | null): ManagerAddedEventFilter;

    "ManagerRemoved(address)"(
      account?: string | null
    ): ManagerRemovedEventFilter;
    ManagerRemoved(account?: string | null): ManagerRemovedEventFilter;
  };

  estimateGas: {
    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserCA(userId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    removeUser(
      userId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createUser(
      userId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isManager(account: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserCA(
      userId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeUser(
      userId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createUser(
      userId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isManager(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
