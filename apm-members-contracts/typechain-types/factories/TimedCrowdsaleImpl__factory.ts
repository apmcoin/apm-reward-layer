/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TimedCrowdsaleImpl,
  TimedCrowdsaleImplInterface,
} from "../TimedCrowdsaleImpl";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "hasClosed",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "rate",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "weiRaised",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "isOpen",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "closingTime",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "wallet",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "closingTime",
        type: "uint256",
      },
    ],
    name: "extendTime",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "openingTime",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "buyTokens",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "token",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        name: "openingTime",
        type: "uint256",
      },
      {
        name: "closingTime",
        type: "uint256",
      },
      {
        name: "rate",
        type: "uint256",
      },
      {
        name: "wallet",
        type: "address",
      },
      {
        name: "token",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "prevClosingTime",
        type: "uint256",
      },
      {
        indexed: false,
        name: "newClosingTime",
        type: "uint256",
      },
    ],
    name: "TimedCrowdsaleExtended",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "purchaser",
        type: "address",
      },
      {
        indexed: true,
        name: "beneficiary",
        type: "address",
      },
      {
        indexed: false,
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensPurchased",
    type: "event",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405160a0806111a1833981018060405260a081101561003057600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505084848484846001600081905550600083116100ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43726f776473616c653a2072617465206973203000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610172576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061117c6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806111586024913960400191505060405180910390fd5b8260038190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050428210156102dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001806110ee6033913960400191505060405180910390fd5b818111610335576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260378152602001806111216037913960400191505060405180910390fd5b816005819055508060068190555050505050505050610d95806103596000396000f3fe6080604052600436106100915760003560e01c8063521eb27311610059578063521eb2731461017b578063a27aebbc146101d2578063b7a8807c1461020d578063ec8ac4d814610238578063fc0c546a1461027c57610091565b80631515bc2b1461009c5780632c4e722e146100cb5780634042b66f146100f657806347535d7b146101215780634b6753bc14610150575b61009a336102d3565b005b3480156100a857600080fd5b506100b1610430565b604051808215151515815260200191505060405180910390f35b3480156100d757600080fd5b506100e061043c565b6040518082815260200191505060405180910390f35b34801561010257600080fd5b5061010b610446565b6040518082815260200191505060405180910390f35b34801561012d57600080fd5b50610136610450565b604051808215151515815260200191505060405180910390f35b34801561015c57600080fd5b5061016561046b565b6040518082815260200191505060405180910390f35b34801561018757600080fd5b50610190610475565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101de57600080fd5b5061020b600480360360208110156101f557600080fd5b810190808035906020019092919050505061049f565b005b34801561021957600080fd5b506102226104ab565b6040518082815260200191505060405180910390f35b61027a6004803603602081101561024e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102d3565b005b34801561028857600080fd5b506102916104b5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6001600080828254019250508190555060008054905060003490506102f883826104df565b600061030382610567565b905061031a8260045461058590919063ffffffff16565b60048190555061032a848261060d565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a36103a1848361061b565b6103a961061f565b6103b3848361068a565b5050600054811461042c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b5050565b60006006544211905090565b6000600354905090565b6000600454905090565b6000600554421015801561046657506006544211155b905090565b6000600654905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104a88161068e565b50565b6000600554905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104e7610450565b610559576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f54696d656443726f776473616c653a206e6f74206f70656e000000000000000081525060200191505060405180910390fd5b61056382826107ae565b5050565b600061057e600354836108af90919063ffffffff16565b9050919050565b600080828401905083811015610603576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6106178282610935565b5050565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610687573d6000803e3d6000fd5b50565b5050565b610696610430565b15610709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f54696d656443726f776473616c653a20616c726561647920636c6f736564000081525060200191505060405180910390fd5b6006548111610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180610cb6603f913960400191505060405180910390fd5b7f46711e222f558a07afd26e5e71b48ecb0a8b2cdcd40faeb1323e05e2c76a2f3260065482604051808381526020018281526020019250505060405180910390a18060068190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180610d16602a913960400191505060405180910390fd5b60008114156108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f43726f776473616c653a20776569416d6f756e7420697320300000000000000081525060200191505060405180910390fd5b5050565b6000808314156108c2576000905061092f565b60008284029050828482816108d357fe5b041461092a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610cf56021913960400191505060405180910390fd5b809150505b92915050565b6109828282600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109869092919063ffffffff16565b5050565b610a52838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a57565b505050565b610a768273ffffffffffffffffffffffffffffffffffffffff16610ca2565b610ae8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310610b375780518252602082019150602081019050602083039250610b14565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610b99576040519150601f19603f3d011682016040523d82523d6000602084013e610b9e565b606091505b509150915081610c16576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b600081511115610c9c57808060200190516020811015610c3557600080fd5b8101908080519060200190929190505050610c9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180610d40602a913960400191505060405180910390fd5b5b50505050565b600080823b90506000811191505091905056fe54696d656443726f776473616c653a206e657720636c6f73696e672074696d65206973206265666f72652063757272656e7420636c6f73696e672074696d65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743726f776473616c653a2062656e656669636961727920697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a165627a7a7230582021d86ea90633538104d58470c3687de1db13b6033e14d9b7cc020c15cb5b2124002954696d656443726f776473616c653a206f70656e696e672074696d65206973206265666f72652063757272656e742074696d6554696d656443726f776473616c653a206f70656e696e672074696d65206973206e6f74206265666f726520636c6f73696e672074696d6543726f776473616c653a20746f6b656e20697320746865207a65726f206164647265737343726f776473616c653a2077616c6c657420697320746865207a65726f2061646472657373";

type TimedCrowdsaleImplConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TimedCrowdsaleImplConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TimedCrowdsaleImpl__factory extends ContractFactory {
  constructor(...args: TimedCrowdsaleImplConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    openingTime: BigNumberish,
    closingTime: BigNumberish,
    rate: BigNumberish,
    wallet: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TimedCrowdsaleImpl> {
    return super.deploy(
      openingTime,
      closingTime,
      rate,
      wallet,
      token,
      overrides || {}
    ) as Promise<TimedCrowdsaleImpl>;
  }
  getDeployTransaction(
    openingTime: BigNumberish,
    closingTime: BigNumberish,
    rate: BigNumberish,
    wallet: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      openingTime,
      closingTime,
      rate,
      wallet,
      token,
      overrides || {}
    );
  }
  attach(address: string): TimedCrowdsaleImpl {
    return super.attach(address) as TimedCrowdsaleImpl;
  }
  connect(signer: Signer): TimedCrowdsaleImpl__factory {
    return super.connect(signer) as TimedCrowdsaleImpl__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TimedCrowdsaleImplInterface {
    return new utils.Interface(_abi) as TimedCrowdsaleImplInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TimedCrowdsaleImpl {
    return new Contract(address, _abi, signerOrProvider) as TimedCrowdsaleImpl;
  }
}
