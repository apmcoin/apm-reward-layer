/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AddressImpl, AddressImplInterface } from "../AddressImpl";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "account",
        type: "address",
      },
    ],
    name: "isContract",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80631627905514602d575b600080fd5b606c60048036036020811015604157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506086565b604051808215151515815260200191505060405180910390f35b6000608f826096565b9050919050565b600080823b90506000811191505091905056fea165627a7a7230582041d677d928bac78c0984b79e7bbc846692da7501941589f1509fd0e76ee09a890029";

type AddressImplConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressImplConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressImpl__factory extends ContractFactory {
  constructor(...args: AddressImplConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AddressImpl> {
    return super.deploy(overrides || {}) as Promise<AddressImpl>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AddressImpl {
    return super.attach(address) as AddressImpl;
  }
  connect(signer: Signer): AddressImpl__factory {
    return super.connect(signer) as AddressImpl__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressImplInterface {
    return new utils.Interface(_abi) as AddressImplInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressImpl {
    return new Contract(address, _abi, signerOrProvider) as AddressImpl;
  }
}
